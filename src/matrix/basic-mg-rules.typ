#import "@local/LibEngage:1.0.0": meta, shapes, typography, units
#import units: inches
#import shapes: arrow

#show: doc => meta.engageDoc(
    author: "Chris Engle & Japanoise",
    "The Basic Matrix Game",
    doc
)

#set page(columns: 2)

= The Basic Matrix Game

Matrix Games are a fast & easy way to run games.  They allow players
to run very complicated scenarios in only two to four hours.

All that is needed to play is:

- A Matrix Game Scenario Book
- Character Cards (photocopy on cardstock from the book)
- A Map
- One six-sided die per player
- One player to act as referee
- Two to twenty other players to run characters

The "Matrix" refers to the logic and state of the fictional or
simulated world.  In most games, the exact nature of the Matrix can
only be manipulated in very specific ways, usually heavily constrained
by rules, mechanics, and procedures.  But in a Matrix Game, the basic
rules of the game, the basic turn procedure, gives players an open
door to manipulate the Matrix directly, while still preserving the fun
and unexpectedness of a proper game.

== Turn Order

Each game turn proceeds as follows:

1. Move the Character(s) you control.
2. Negotiate with other players.
3. Make Arguments about what you want to happen next.
4. The referee decides:
    1. How strong arguments are
    2. Which arguments are in competition, and
    3. Which arguments cause Conflict & Trouble.
5. Players roll to see which Arguments happen.
6. Additional Arguments are made for Conflicts and Trouble as needed.

The exact length of a game turn is variable; use whatever makes sense
for the scale of effects generated by Arguments. In a fight it might
be seconds or minutes.  In a campaign it might be a month.

== Characters

Characters are described in prose rather than with numerical
statistics.  Each piece of information about a character is called a
*Status*. Examples of a character's Status might include:

- *Age* — Child, young, middle-aged, old, ancient.
- *Wealth* — Poor, respectable, well-off, rich, filthy rich.
- *Political Power* — Wretched, powerless, weak, respected, important,
   powerful, very powerful.
- *Others* — Wounds, Health, Skills, Stress, Reputation, Emotions,
   Relationships.

Changes in characters over time take place through changes in their
Statuses.

== Movement

Players start the game controlling one Character.  Each turn players
may move all Characters they control.  Characters can move anywhere
they want to inside the area they are in OR they can move to an
adjacent area.

Characters can go anywhere; so by default, nobody has privacy or
security.  Players can get privacy or security by building walls of
"defense" around them.  Defense "Barriers" stop characters from
entering.  Characters may only enter if an argument allows them to.
This may cause a Conflict.

A Defense Barrier may sometimes be "hiding" or "wearing a disguise" so
that people will not know where a character is.  These barriers act
just like guards — they block movement.

=== Who moves first?

Players all move at the same time, and may continue moving throughout
until the referee asks the players to start making Arguments.  While
moving, players can talk and make deals, and can do short role-play
sessions.

The overall effect is that movement is very flexible and easy (you
can't do it wrong so long as you end up within the area you started or
one adjacent to it) and makes it less important — you can't spring a
trap through mere movement.  Surrounded characters just move on.  It
takes arguments, that create Barriers, to trap people.

== Negotiation

Players can talk to one another while Moving.  Referees should give
them up to about five minutes to do this.  During these negotiations,
players can make deals, coordinate movement, make plans, coordinate
their arguments, and do mini-role play sessions or combat games.  The
results of Negotiations are not added to the matrix of information
about the world.  They only help the players coordinate their actions.

Matrix Games are not roleplaying games but they may use role-playing
to resolve certain events.

#block(stroke: black+1pt, height: 22%, width: 100%)[
    #set text(8pt)

    #place(
        center+horizon,
        dx: -0.7em,
        dy: 0em,
        rotate(
            reflow: true,
            90deg,
            line(length: 100%)
        )
    )

    #place(
        right+horizon,
        dx: -1em,
        ellipse(
            width: 3em,
            height: 6em,
        )
    )

    #place(
        right+horizon,
        dx: -4.4em,
        dy: 2pt,
        polygon(
            fill: silver,
            stroke: black,
            (0pt, 0pt),
            (5pt, 2pt),
            (10pt, 0pt),
            (5pt, 5pt),
            (10pt, 10pt),
            (4pt, 7pt),
            (0pt, 10pt),
            (2pt, 5pt),
            (-3pt, 5pt),
            (2pt, 3pt),
        )
    )

    #place(
        right+horizon,
        dx: -2em,
        dy: -1em,
        circle(
            radius: 5pt,
        )
    )

    #place(
        right+horizon,
        dx: -2em,
        dy: 0.6em,
        rotate(
            reflow: true,
            80deg,
            line(length: 16pt)
        )
    )

    #place(
        right+horizon,
        dx: -2.9em,
        dy: 0.6em,
        rotate(
            reflow: true,
            100deg,
            line(length: 16pt)
        )
    )

    #place(
        left+horizon,
        dx: 8em,
        dy: -1em,
        circle(
            radius: 5pt,
        )
    )

    #place(
        left+horizon,
        dx: 8.9em,
        dy: 0.6em,
        rotate(
            reflow: true,
            80deg,
            line(length: 16pt)
        )
    )

    #place(
        left+horizon,
        dx: 8em,
        dy: 0.6em,
        rotate(
            reflow: true,
            100deg,
            line(length: 16pt)
        )
    )

    #place(
        left+bottom,
        dx: 59pt,
        dy: -16pt,
        rotate(
            reflow: true,
            180deg,
            arrow(
                fill: black,
                stroke: none, 20pt, 18pt, 8pt, 20pt
            )
        )
    )

    #place(
        right+horizon,
        dx: -50pt,
        dy: 2pt,
        rotate(
            reflow: true,
            90deg,
            arrow(
                fill: black,
                stroke: none, 25pt, 20pt, 10pt, 25pt
            )
        )
    )

    #place(
        center+horizon,
        dx: -8pt,
        dy: 2pt,
        rotate(
            reflow: true,
            90deg,
            arrow(
                fill: black,
                stroke: none, 25pt, 20pt, 10pt, 40pt
            )
        )
    )

    #place(
        center+top,
        dx: -25pt,
        dy: 18pt,
        rotate(
            reflow: true,
            45deg,
            arrow(
                fill: black,
                stroke: none, 25pt, 20pt, 10pt, 20pt
            )
        )
    )

    #place(
        left+top,
        dx: 20pt,
        dy: 18pt,
        rotate(
            reflow: true,
            -45deg,
            arrow(
                fill: black,
                stroke: none, 25pt, 20pt, 10pt, 20pt
            )
        )
    )

    #place(
        horizon+left,
        dx: 1em,
        dy: 2em,
        align(center, text("Move\nanywhere in\nthe area you\nare in"))
    )

    #place(
        center+top,
        dx: 6em,
        dy: 4pt,
        block(
            fill: white,
            inset: 0.5em,
            stroke: black+1pt,
            text("Move into areas next to\nthe area you start in.")
        )
    )

    #place(
        horizon+right,
        dx: -2pt,
        dy: -30pt,
        block(
            fill: white,
            inset: 0.5em,
            stroke: black+1pt,
            text(9pt, weight: "bold", "Defense\nBarrier")
        )
    )

    #place(
        right+bottom,
        dx: -4pt,
        dy: -4pt,
        block(
            fill: white,
            inset: 0.5em,
            stroke: black+1pt,
            align(center,
                text("It takes an argument and perhaps\na conflict to cross a defense\nbarrier.")
            )
        )
    )

    #place(
        bottom+right,
        dx: -5.7em,
        dy: -4.7em,
        rotate(
            reflow: true,
            -45deg,
            line(length: 40pt)
        )
    )

    #place(
        top+center,
        dx: 0.1em,
        dy: 3.4em,
        rotate(
            reflow: true,
            102deg,
            line(length: 50pt)
        )
    )

]

#set page(columns: 1)

== Arguments make things happen

In Matrix Games, players make things happen — affect the Matrix — by
saying what they think should happen next.  This is an Argument.
Arguments can be made about *anything.* Players get to make one
argument a turn.  As the players make their Arguments, the referee
decides how strong each argument is.  This determines what needs to be
rolled for it to happen.

#grid(
    inset: 5pt,
    columns: (1fr, 1fr, 1fr, 1fr),
    stroke: 1pt+black,
    align: center+top,
    text(weight: "bold", 12pt)[Example],
    text(weight: "bold", 12pt)[Player One],
    text(weight: "bold", 12pt)[Player Two],
    text(weight: "bold", 12pt)[Player Three],

    [Players make arguments. They say them out loud.],
    [I recruit Bob as a new character under my control.],
    [Bob does not want to join any groups.  He is an independent!],
    [I get an extra move.  My guys surround the bad guys.  Forming a
        defense wall.  They can't escape.],

    [The referee decides how strong arguments are.],
    [Strong! Roll a 3–6 for it to happen.],
    [Average!  Roll a 4–6 for it to happen.],
    [Weak!  Roll a 5–6 for it to happen.],

    grid.cell(
        stroke: (right: none),
        underline(text(weight: "bold", 12pt)[The Players])
    ),
    grid.cell(
        stroke: (left: none, right: none),
        underline(text(weight: "bold", 12pt)[roll at])
    ),
    grid.cell(
        stroke: (left: none, right: none),
        underline(text(weight: "bold", 12pt)[the same])
    ),
    grid.cell(
        stroke: (left: none),
        underline(text(weight: "bold", 12pt)[time!])
    ),

    [Players roll a die for their own argument.],
    text(weight: "bold", 24pt)[1],
    text(weight: "bold", 24pt)[4],
    text(weight: "bold", 24pt)[4],

    [Some succeed, some fail.],
    text(weight: "bold", 12pt)[Failed],
    text(weight: "bold", 12pt)[Succeeded],
    text(weight: "bold", 12pt)[Failed],
)

#grid(
    align: center+horizon,
    gutter: 1em,
    columns: 2,
    table(
        fill: (_, y) => meta.repeatingStripesFill(meta.sixRowColors, y),
        columns: 2,
        align: (left, center),
        table.header(
            [Argument Strength],
            [Roll required]
        ),
        [Very Strong], [2, 3, 4, 5, 6],
        [Strong], [3, 4, 5, 6],
        [Average], [4, 5, 6],
        [Weak], [5, 6],
        [Very Weak], [6],
        [Stupid], [7],
    ),

    grid.cell(
        inset: 5pt,
        stroke: 1pt,
        align(center)[
            *Making things up as you go*

            In Matrix Games, players literally do make the game up as
            they go along!  The players, not the referee, are in
            charge of the game.  The referee only decides how strong
            arguments are.  The players decide what is in the world.

            This takes a little getting use to.  Since players can do
            anything, what should they do first?  Well, first leave
            behind the idea that creativity is cheating!  Players are
            free to make a vision about what they want to see happen
            and then go out and make it so.

        ]
    )
)

== Competing Arguments

After the players have made their Arguments, the referee decides if
any arguments are in competition.  Arguments that cannot both happen —
that contradict each other — battle it out in a dice rolling contest.

#let failedRoll(n) = grid.cell()[#text(weight: "bold", 16pt, n)\
    Failed]

#grid(
    inset: 5pt,
    columns: (1fr, 1fr, 1fr, 1fr),
    stroke: 1pt+black,
    align: center+top,
    text(weight: "bold", 12pt)[Example],
    text(weight: "bold", 12pt)[Player One],
    text(weight: "bold", 12pt)[Player Two],
    text(weight: "bold", 12pt)[Player Three],

    [Players make arguments about what they want to happen.],
    [I recruit Bob to be my man.],
    [My man, Tim, recruits Bob to be under my control.],
    [I fight a duel with Tim.],

    [The referee decides which arguments are in competition.],

    grid.cell(
        colspan: 3,
        [
            "Player One's argument is in competition with Player Two's
            argument, as Bob cannot be controlled by two people at
            once.  Player Two & Player Three's arguments are also in
            competition.  Player One & Player Three would not be in
            competition, but because they are tangled up with Player
            Two the matter will be settled by a single dice rolling
            contest. All arguments are Average — roll 4+."
        ]
    ),

    [Players roll for their own arguments as before.],
    text(weight: "bold", 24pt)[4],
    text(weight: "bold", 24pt)[6],
    failedRoll([3]),

    [Players who fail rolls drop out of future rounds.],
    failedRoll([1]),
    failedRoll([3]),
    grid.cell(align: center+horizon, text(weight: "bold", 16pt, [No roll])),

    [What if all arguments fail?],

    grid.cell(colspan:3)[If all of the arguments roll out, then a new
        dice rolling contest begins. One of the arguments _will_ happen.],

    [Eventually, one of the players wins.],
    failedRoll([2]),
    failedRoll([2]),
    text(weight: "bold", 24pt)[6],
)

#set page(columns: 2)

== Conflicts

As the players make their Arguments, the referee decides which ones
will cause a Conflict.  Conflicts happen when an argument's action is
too important to settle with a single dice roll.  Conflict causes a
second round of arguments to find out what actually happens.  It is
possible that the character who starts the fight can lose it!

1. Players make arguments.  The referee decides if they cause a
   conflict.
2. The referee decides who is involved in the Conflict.
3. The referee decides who is in the strongest position, then the
   second, third, and so on.
4. The referee asks the strongest player to make an Argument about
   what happens in the Conflict.
5. The referee decides how strong the Argument is, then the player
   rolls for it immediately.  If it happens, then the Conflict is
   settled.
6. If the Argument fails, then the next strongest player Argues.  This
   continues down the order of strength until an Argument succeeds.
7. If all players have Argued and not succeeded, then the strongest
   player gets to make a second argument.  Continue on until an
   Argument succeeds.

The referee can decide that a successful Conflict Argument causes a
new round of Conflict.  This Conflict can be done immediately.  In
this way it is possible to fight out entire battles in short order.

#grid(
    columns: 2,
    gutter: 1em,

    [The referee does not have to make any Arguments cause a Conflict
        round.  If it will save time then the issue can be settled by
        the first roll alone.  This is a good thing to do with smaller
        points that are not centrally important.],

    [
        === Common Conflicts

        - Combat
        - Recruiting new characters
        - Stealing things
        - Magic
        - Politics
        - Building things
        - Arresting people
        - Trials
    ],

)

== Trouble

Players may Argue to set up situations that will cause trouble for
characters.  The referee decides if an argument causes trouble as the
players make them.

If Characters face their Trouble it does not hurt them.  But if they
ignore it or fail to deal with it effectively, it sticks around as a
Status.  Too many bad Statuses like this and a referee will start
ruling that Character's Arguments weaker and weaker.

When Trouble comes, players get an extra Argument to deal with it.

1. Players make Arguments.  The referee decides if they cause Trouble.
2. The referee decides who is affected by the Trouble and what happens
   if they fail to deal with it.
3. Each player affected gets to make one free Argument about how they
   deal with the Trouble.
4. The players who fail to make a successful Argument get a bad
   Status.  They can get rid of this Status by arguing how they get
   rid of it on the next turn.

The way Characters deal with Trouble can cause more Trouble.  The
referee can have players make more Trouble Arguments.  Players can
also save themselves by passing the Trouble onto another player!  This
causes the other player to make a saving Argument.

#grid(
    columns: 2,
    gutter: 1em,

    [
        If the referee wants, Trouble Arguments can cause Conflicts.

        Players can do more harm to one another by dishing out Trouble than
        they can from Conflict.  So wise players always deal with their own
        problems first — then they go after the other guy!
    ],

    [
        === Common Trouble

        - Wounds
        - Illness
        - Natural Disasters
        - Curses
        - Becoming Lost
        - Mechanical Breakdowns
        - Political Crises
        - Emotions
        - Scandal

    ],
)

== Planning

Some actions are just too big to do in one Argument.  They may take
many Arguments to do right.  Players do this by breaking down their
action into small pieces and arguing for each one in turn.

Players can make Arguments that actually take care of part of the task
or they can make Arguments that prepare the way for one big Argument
to succeed.

=== Possibilities not Probabilities

Matrix Game players quickly find that since they can do anything they
want that they can't just look at the rules and figure out the odds of
every action working.  Probability is less important than possibility.
Why?  Because with the right set of planning Arguments, any possible
action can be made probable! So, planning and preparation are the real
keys to success in Matrix Games.  Small, simple arguments often
succeed; and a series of them can make big arguments easier.

=== Matrix Game Refereeing Hint

As the referee, you are the host of the game.  Your job is to give the
players a good time.  "Beating" them is not the goal.  So help them
succeed in their goals.  Be nice in ruling on an Argument's strength.
Don't require the players to do more than two or three actions to set
up an Argument.  And don't require every issue to be a Conflict.

#set page(columns: 1)

== Speeding up the game

As time runs short, the referee can quickly wrap up a game by speeding
it up.  Do this when you are running out of time.

The referee decides what problems the game has left.  The referee then
asks the players to make Arguments about what happens with each point.
They Argue one point at a time.

The players Arguments are automatically in competition so each point
is settled by a big dramatic dice rolling contest!  In short order
even a very complicated game can be wrapped up.  There is no need to
leave a game unfinished!

== Campaign Games

Matrix Games are made to be stand-alone games, but players can link
them together into multi-session campaign games.  When they do this,
the events of one session carry over to the next game.  Over time,
players can create entire histories.

When games last for multiple sessions then the players will want to
know what their characters do in-between games.  This is easy to
include.  Before each game session give the players three Arguments to
do the following things:

1. Make an Argument about your Character's social life.  Build contacts.
   Do social climbing.
2. Make an argument about how your Character grew.  New skills, new
   knowledge?
3. Make an argument about something that happened in the world that
   has nothing to do with the action of the game.  (This makes games
   come to life.  No longer are the players the center of the
   Universe!)

Referees frequently find that giving players inter-game Arguments
greatly increases player commitment to the game.  Players have a stake
in the world and a new purpose in all that they do.

== The rules at a glance

#set text(8.5pt)

#let arrow-width = 16pt

#let flow-arrow(rowspan: 1, height) = grid.cell(
    rowspan: rowspan,
    inset: 0pt,
    rotate(
        reflow: true,
        180deg,
        arrow(
            fill: black,
            stroke: none,
            arrow-width,
            height/2,
            arrow-width/2,
            height/2
        )
    )
)

#let flow-stroke = (x, _) => if (x == 0) { none } else { 1pt+black }

#grid(
    align: (center+horizon, left+horizon, center+horizon),
    columns: (arrow-width, 10fr, 4fr, 6fr),
    gutter: 0.5em,
    inset: 0.5em,
    stroke: flow-stroke,

    flow-arrow(2em),
    grid.cell(colspan: 2)[Players move the Characters they control.],

    grid.cell(
        align: top,
        rowspan: 5,
        [
            *Argument Strength Table*\
            *Roll one six-sided die per Argument.*

            #table(
                stroke: none,
                fill: (_, y) => meta.repeatingStripesFill(meta.sixRowColors, y),
                columns: 2,
                align: (left, center),
                table.header(
                    [Argument Strength],
                    table.vline(),
                    [Roll required],
                    table.hline(),
                ),
                [Very Strong], [2, 3, 4, 5, 6],
                [Strong], [3, 4, 5, 6],
                [Average], [4, 5, 6],
                [Weak], [5, 6],
                [Very Weak], [6],
                [Stupid], [7],
            )
        ]
    ),

    flow-arrow(2em),
    grid.cell(colspan: 2)[While moving, players can talk and role play with one another.],

    flow-arrow(2em),
    grid.cell(colspan: 2)[The referee asks the players to make Arguments about what happens
        next. One Argument per player.],

    flow-arrow(2em), grid.cell(colspan: 2)[After each Argument is made, the referee
        decides how strong it is and if it causes Conflict or
        Trouble.],

    flow-arrow(2em), grid.cell(colspan: 2)[An Argument's strength determines what needs to
        be rolled on a six-sided die for it to happen.],

    flow-arrow(2.5em), [The referee decides if an Argument will cause
        Conflict or Trouble.  It is totally up to the referee! No
        Arguments automatically cause it.],

    grid.cell(
        rowspan: 2,
        colspan: 2,
    )[
        *Competing Argument Dice Rolling Contests*

        Two or more arguemnts can be in competition.  Each player
        rolls for his own argument.  Arguments that fail their roll
        drop out of the contest.  Keep on rolling till only one
        argument is left.  If all of the arguments fail then a new
        contest begins.  One argument MUST succeed.
    ],

    flow-arrow(rowspan: 2, 3em),
    grid.cell(rowspan: 2)[After all the Arguments are made, the
        referee decides which Arguments are in competition with one
        another.  This causes a dice rolling contest.],

    grid.cell(
        rowspan: 3,
        colspan: 2,
    )[
        Conflict causes extra rounds of arguments.

        The referee decides who is involved with the conflict and how
        strong each player is.  The strongest player gets to make an
        Argument about what happened in the conflict.  If it happens,
        the Conflict is settled. If it fails, the next strongest
        player gets to make an argument, and so on until someone
        succeeds.  The referee can decide that a Conflict argument
        causes another Conflict.
    ],

    flow-arrow(3.5em), [Players roll one six-sided dice for their own
        argument to see if it happens, unless their Argument is
        inconsistent with another Argument.  If they roll any of the
        target numbers then the argument happens.],

    flow-arrow(rowspan: 2, 2.5em), grid.cell(rowspan: 2)[Competing
        arguments cannot both happen; only one can.  Players settle it
        with a dice rolling contest.],

    grid.cell(
        rowspan: 4,
        colspan: 2,
    )[
        Trouble also causes extra Arguments.

        The referee decides who the Trouble affects and what Status it
        gives to those who fail to deal with it.  Each affected player
        gets to make an Argument as to how they deal with the Trouble
        or why it doesn't affect them.  The referee rules on Argument
        strength & Conflicts, then the player(s) roll as always.

        Players who fail will have to use their regular arguments to
        fix the Trouble — or live with the consequences!
    ],

    flow-arrow(2.5em), [Successful arguments happen. They change the
    "Matrix" of the world by adding to it, taking something away, or
    altering it.],

    flow-arrow(2.5em), [Conflict and trouble arguments that happen
        cause extra rounds of arguments to find out how they come
        out.],

    [], [Now begin the next turn. Don't be afraid if you are making it up as you go along — that
        is how Matrix Games are played!],

)

#pagebreak()

== Credits & History

Matrix Games were invented by Chris Engle in Bloomington Indiana in
1988, an evolution of wargaming campaigns such as those run by Tony
Bath, Paddy Griffith's "muggergames", RPG campaigns such as Dave
Arneson's Blackmoor, & the ancestors of D&D in the "Braunstein" games
run by Dave Wesely.  Engle's "Campaign In A Day" approach favored
words and reason over statistical abstraction and mathematics.

Engle Matrix Games are copyright Chris Engle and licensed under the
Creative Commons Attribution-ShareAlike 4.0 International
(CC BY-SA 4.0) license. If you create derivative works, please include
the sentence, "Matrix Games were invented by Chris Engle."

This presentation of the basic Matrix Game rules was created by
japanoise in 2025, and is licensed CC~BY-SA~4.0.  She humbly
asks you to direct any monetary support to Chris Engle, or failing
that to a charity doing good work for marginalized groups, such as
_#link("https://mermaidsuk.org.uk/")[Mermaids]_ in the UK.
